{"version":3,"sources":["../lib/serve.js"],"names":["pwd","process","cwd","PORT","TEST_PORT","ASSETS_DIR","DIST_DIR","INDEX_HTML","NODE_DIR","setupServer","options","test","distFolder","componentsDist","info","server","Server","connection","host","port","distFiles","Promise","resolve","reject","register","err","route","method","path","handler","request","reply","file","confine","directory","debug","start","uri"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,MAAMC,QAAQC,GAAR,EAAZ;;AAEA,IAAMC,OAAO,oBAAUA,IAAvB;AACA;AACA,IAAMC,YAAY,oBAAUA,SAA5B;AACA,IAAMC,aAAa,oBAAUA,UAA7B;AACA,IAAMC,WAAW,oBAAUA,QAA3B;AACA,IAAMC,aAAgBD,QAAhB,gBAAN;AACA,IAAME,WAAW,oBAAUA,QAA3B;;AAGA,IAAMC,cAAc,SAAdA,WAAc,CAAEC,OAAF,EACpB;AAAA,QAD+BC,IAC/B,uEADsC,KACtC;;AACI;AACA,QAAMC,aAAgBZ,GAAhB,SAAuBU,QAAQG,cAArC;;AAEA,qBAAOC,IAAP,CAAa,0CAAb;AACA,qBAAOA,IAAP,CAAa,0CAAb;AACA,qBAAOA,IAAP,CAAa,0CAAb;;AAEA,QAAMC,SAAS,IAAI,eAAKC,MAAT,EAAf;AACAD,WAAOE,UAAP,CAAmB;AACfC,cAAO,WADQ;AAEfC,cAAOR,OAAOP,SAAP,GAAmBD;AAFX,KAAnB;;AAKA;AACA,QAAMiB,YAAYd,QAAlB;;AAEA,WAAO,IAAIe,OAAJ,CAAa,UAAEC,OAAF,EAAWC,MAAX,EACpB;AACIR,eAAOS,QAAP,kBAAwB,UAAEC,GAAF,EACxB;AACI,gBAAKA,GAAL,EACA;AACI,sBAAMA,GAAN;AACH;;AAEDV,mBAAOW,KAAP,CAAc;AACVC,wBAAS,KADC;AAEVC,sBAAS,GAFC;AAGVC,uBAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACI,qCAAOjB,IAAP,CAAaP,UAAb;AACAwB,0BAAMC,IAAN,CAAYzB,UAAZ,EAAyB,EAAC0B,SAAS,KAAV,EAAzB;AACH;AAPS,aAAd;;AAUAlB,mBAAOW,KAAP,CAAc;AACVC,wBAAU,KADA;AAEVC,sBAAU,kBAFA;AAGVC,yBAAU;AACNK,+BAAY;AACRN,8BAAOvB;AADC;AADN;AAHA,aAAd;;AAWAU,mBAAOW,KAAP,CAAc;AACVC,wBAAU,KADA;AAEVC,sBAAU,wBAFA;AAGVC,yBAAU;AACNK,+BAAY;AACRN,8BAAOpB;AADC;AADN;AAHA,aAAd;;AAUAO,mBAAOW,KAAP,CAAc;AACVC,wBAAU,KADA;AAEVC,sBAAU,uBAFA;AAGVC,uBAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACI,qCAAOI,KAAP,CAAc,aAAd,EAA8BvB,aAAa,uBAA3C;AACAmB,0BAAMC,IAAN,CAAYpB,aAAa,uBAAzB,EAAkD,EAACqB,SAAS,KAAV,EAAlD;AACH;AAPS,aAAd;;AAUAlB,mBAAOW,KAAP,CAAc;AACVC,wBAAU,KADA;AAEVC,sBAAU,6BAFA;AAGVC,uBAHU,mBAGDC,OAHC,EAGQC,KAHR,EAIV;AACI,qCAAOI,KAAP,CAAc,aAAd,EAA8BvB,aAAa,4BAA3C;AACAmB,0BAAMC,IAAN,CAAYpB,aAAa,6BAAzB,EAAwD,EAACqB,SAAS,KAAV,EAAxD;AACH;AAPS,aAAd;;AAUAlB,mBAAOqB,KAAP,CAAc,UAAEX,GAAF,EACd;AACI,oBAAKA,GAAL,EACA;AACI,0BAAMA,GAAN;AACH;;AAED,iCAAOX,IAAP,CAAa,oBAAb,EAAmCC,OAAOD,IAAP,CAAYuB,GAA/C;;AAEAf;AACH,aAVD;AAWH,SArED;AAsEH,KAxEM,CAAP;AAyEH,CA3FD;;kBA6Feb,W","file":"serve.js","sourcesContent":["import Hapi                from 'hapi';\nimport inert               from 'inert';\nimport path                from 'path';\n\nimport logger              from './logger';\nimport CONSTANTS           from '../constants';\n\nconst pwd = process.cwd();\n\nconst PORT = CONSTANTS.PORT;\n// const runningInLochness = CONSTANTS.runningInLochness;\nconst TEST_PORT = CONSTANTS.TEST_PORT;\nconst ASSETS_DIR = CONSTANTS.ASSETS_DIR;\nconst DIST_DIR = CONSTANTS.DIST_DIR;\nconst INDEX_HTML = `${DIST_DIR}/index.html`;\nconst NODE_DIR = CONSTANTS.NODE_DIR;\n\n\nconst setupServer = ( options, test = false ) =>\n{\n    // TODO check if dist files exist, if not trigger build?\n    const distFolder = `${pwd}/${options.componentsDist}`;\n\n    logger.info( '****************************************')\n    logger.info( '*****  Setting up Lochness Server  *****')\n    logger.info( '****************************************')\n\n    const server = new Hapi.Server();\n    server.connection( {\n        host : 'localhost',\n        port : test ? TEST_PORT : PORT\n    } );\n\n    // const distFiles = path.resolve( pwd, options.componentsDist );\n    const distFiles = DIST_DIR;\n\n    return new Promise( ( resolve, reject ) =>\n    {\n        server.register( inert, ( err ) =>\n        {\n            if ( err )\n            {\n                throw err;\n            }\n\n            server.route( {\n                method : 'GET',\n                path   : '/',\n                handler( request, reply )\n                {\n                    logger.info( INDEX_HTML )\n                    reply.file( INDEX_HTML , {confine: false});\n                }\n            } );\n\n            server.route( {\n                method  : 'GET',\n                path    : '/assets/{param*}',\n                handler : {\n                    directory : {\n                        path : ASSETS_DIR\n                    }\n                }\n            } );\n\n\n            server.route( {\n                method  : 'GET',\n                path    : '/node_modules/{param*}',\n                handler : {\n                    directory : {\n                        path : NODE_DIR\n                    }\n                }\n            } );\n\n            server.route( {\n                method  : 'GET',\n                path    : '/displayComponents.js',\n                handler( request, reply )\n                {\n                    logger.debug( 'Requesting:',  distFolder + '/displayComponents.js' )\n                    reply.file( distFolder + '/displayComponents.js', {confine: false} );\n                }\n            } );\n\n            server.route( {\n                method  : 'GET',\n                path    : '/displayComponentStyles.css',\n                handler( request, reply )\n                {\n                    logger.debug( 'Requesting:',  distFolder + '/displayComponentStyles.js' )\n                    reply.file( distFolder + '/displayComponentStyles.css', {confine: false} );\n                }\n            } );\n\n            server.start( ( err ) =>\n            {\n                if ( err )\n                {\n                    throw err;\n                }\n\n                logger.info( 'Server running at:', server.info.uri );\n\n                resolve();\n            } );\n        } );\n    } );\n}\n\nexport default setupServer;\n"]}