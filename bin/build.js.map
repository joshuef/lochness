{"version":3,"sources":["../lib/build.js"],"names":["copyfiles","require","fs","options","distOptions","env","config","DIST_DIR","OUT_DIR","mkdirsSync","resolve","alias","displayComponentsSrc","then","info","err","stats","hasErrors","error","console","log"],"mappings":";;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAYC,QAAS,WAAT,CAAlB;AACA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;;AAEA,IAAME,UAAU,iDAAhB;;AAEA,IAAMC,2BAAmBD,OAAnB,IAA4BE,KAAK,MAAjC,GAAN;AACA,IAAMC,SAAU,8BAAgBF,WAAhB,CAAhB;;AAEA,IAAMG,WAAW,oBAAUA,QAA3B;AACA,IAAMC,UAAU,oBAAUA,OAA1B;;AAEAN,GAAGO,UAAH,CAAeD,OAAf;AACAN,GAAGO,UAAH,CAAeF,QAAf;;AAEA,sBAAcD,OAAOI,OAAP,CAAeC,KAAf,CAAqBC,oBAAnC,EACCC,IADD,CACO,YACP;AACI,qBAAOC,IAAP,CAAa,sCAAb;AACA,qBAAOA,IAAP,CAAa,sCAAb;AACA,qBAAOA,IAAP,CAAa,sCAAb;AACA,qBAAOA,IAAP,2BAAqCN,OAArC;;AAEA,2BAAQF,MAAR,EAAgB,UAACS,GAAD,EAAMC,KAAN,EAAgB;AAC9B,YAAID,OAAOC,MAAMC,SAAN,EAAX,EAA8B;;AAE5B,6BAAOC,KAAP,CAAc,wBAAd;AACA,6BAAOA,KAAP,CAAcH,GAAd;;AAEA;AACAI,oBAAQC,GAAR,CAAaJ,KAAb;AAED,SARD,MAUA;AACI,6BAAOF,IAAP,CAAY,gBAAZ;AACH;AACF,KAdD;AAgBH,CAxBD","file":"build.js","sourcesContent":["\nimport path                from 'path';\nimport commandLineArgs     from 'command-line-args';\n\nimport logger              from './logger';\n\nimport {Compiler}              from 'webpack';\nimport webpack             from 'webpack';\n\nimport optionDefinitions   from './cli-args';\nimport generateConfig      from './generateConfig';\nimport generateDocs        from './docgen';\nimport CONSTANTS           from '../constants';\n\nconst copyfiles = require( 'copyfiles' );\nconst fs = require('fs-extra');\n\nconst options = commandLineArgs( optionDefinitions );\n\nconst distOptions = { ...options, env: 'dist' };\nconst config  = generateConfig( distOptions );\n\nconst DIST_DIR = CONSTANTS.DIST_DIR;\nconst OUT_DIR = CONSTANTS.OUT_DIR;\n\nfs.mkdirsSync( OUT_DIR );\nfs.mkdirsSync( DIST_DIR );\n\ngenerateDocs( config.resolve.alias.displayComponentsSrc )\n.then( () =>\n{\n    logger.info( '************************************')\n    logger.info( '*****  Starting Webpack Build  *****')\n    logger.info( '************************************')\n    logger.info( ` Outputting build to ${OUT_DIR}`)\n\n    webpack(config, (err, stats) => {\n      if (err || stats.hasErrors()) {\n\n        logger.error( \"Lochness Build Errors:\")\n        logger.error( err )\n\n        // logger does not...\n        console.log( stats )\n\n      }\n      else\n      {\n          logger.info('Lochness built')\n      }\n    });\n\n});\n"]}